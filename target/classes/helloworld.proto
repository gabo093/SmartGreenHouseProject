// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// https://raw.githubusercontent.com/grpc/grpc-java/master/examples/src/main/proto/helloworld.proto

syntax = "proto3";

option java_multiple_files = true;
option java_outer_classname = "MyProjectProto";
option objc_class_prefix = "MyP";
option java_package = "my.project";
package project;

// Reference https://grpc.io/docs/what-is-grpc/core-concepts/

service ClimateControlService {
	// Unary RPCs where the client sends a single request to
	// the server and gets a single response back, just like
	// a normal function call.

	rpc setClimateParameters (ClimateRequest) returns (MsgReply) {}
	rpc setThresholdAlerts (ThresholdRequest) returns (MsgReply) {}
	rpc activateAlerts (Empty) returns (MsgReply) {}
	rpc changeClimateConditions (ChangeClimateConditionsRequest) returns (MsgReply) {}
	rpc activateAutomaticClimateChange (Empty) returns (MsgReply) {}
	rpc getCurrentClimateConditions (Empty) returns (MsgReply) {}
	rpc getCurrentConfiguration (CurrentConfigurationRequest) returns (MsgReply) {}

}

service SprinklerControlService {

	// Server streaming RPCs where the client sends a request
	// to the server and gets a stream to read a sequence of
	// messages back

	rpc setSprinklerType(SprinklerTypeRequest) returns (MsgReply) {}
	rpc activateSprinklers (ActivateSprinklersRecuest) returns (MsgReply) {}
	rpc setAutomaticIrrigationSchecule (IrrigationScheculeRequest) returns (MsgReply) {}
 
 	// Client streaming RPCs where the client writes a sequence
 	// of messages and sends them to the server
 	//rpc function2Service2 (stream MsgRequest) returns (MsgReply) {}

}

service GateControlService {

	// Bidirectional streaming RPCs where both sides send a
	// sequence of messages using a read-write stream
	rpc setupGates (GatesRequest) returns (MsgReply) {}
	rpc getGatesInformation (Empty) returns (MsgReply) {}

	//rpc function1Service3 (stream MsgRequest) returns (stream MsgReply) {}

}

// The request message containing the user's name.
message MsgRequest {
  	string message = 1;
}

// The response message containing the greetings
message MsgReply {
  string message = 1;
}

message ClimateRequest {
  int32 degreeCelcius = 1;
  int32 humidityLevel = 2;
}

message ThresholdRequest {
  string climateParameter = 1;
  int32 threshold = 2;
}

message ChangeClimateConditionsRequest {
  int32 date = 1;
  int32 timeClimeteParameters = 2;
}

message CurrentConfigurationRequest {
  string type = 1;
}

message SprinklerTypeRequest {
  string type = 1;
}

message ActivateSprinklersRecuest {
  int32 numberOfSprinklers = 1;
  int32 time=2;
}

message IrrigationScheculeRequest {
  int32 Frequency = 1;
  int32 time=2;
}

message GatesRequest {
  string state = 1;
  int32 gateIdentifier = 2;
}

message Empty{
}
